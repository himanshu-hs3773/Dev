heapify(iterable): to convert the iterable into a min-heap

li = [5, 7, 9, 1, 3]
heapq.heapify(li)

heappush(heap, ele): to insert the element
heapq.heappush(li,4)

heappop(heap) : to remove and return the smallest element 
heapq.heappop(li)

The created heap is : [1, 3, 9, 7, 5]
The modified heap after push is : [1, 3, 4, 7, 5, 9]
The popped and smallest element is : 1

heappushpop(heap, ele) : li1 = [5, 7, 9, 4, 3] >> heapq.heappushpop(li1, 2) >> 2
push before pop
heapreplace(heap, ele) : li1 = [5, 7, 9, 4, 3] >> heapq.heapreplace(li1, 2) >> 3
pop before push

nlargest(k, iterable, key = fun) : li1 = [6, 7, 9, 4, 3, 5, 8, 10, 1] >> heapq.nlargest(3, li1) >> [10, 9, 8]

nsmallest(k, iterable, key = fun) : li1 = [6, 7, 9, 4, 3, 5, 8, 10, 1] >> heapq.nsmallest(3, li1) >> [1, 3, 4]