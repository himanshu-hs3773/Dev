class Solution:
    def splitArray(self, P, d):
        nums = P # [10,2,20,5,15,10,1]
        n = len(nums)
        m = d # 3
        inf = float("inf")
        if not nums:
            return 0
        dp = [[inf] * (m+1) for _ in range(n+1)]
        dp[0][0] = 0
        left, right = [0] * n, [0] * n
        max_left = 0
        max_right = 0
        for i in range(n):
            max_left = max(nums[i], max_left)
            left[i] = max_left
            max_right = max(nums[-i-1], max_right)
            right[-i-1] = max_right

        for i in range(1, n+1):
            for j in range(1, m+1):
                for k in range(i):
                    dp[i][j] = min(dp[i][j], dp[k][j-1] + min(left[i-1], right[k]))
        return dp[n][m]




class Solution:
    def dfs(self, i, count, curMax, curSum):
        if i == self.n and count == self.m:
            self.ans = min(self.ans, curSum + curMax) # This step is crucial to check the answer against the curSum + curMax
            return
        if i == self.n:
            return
        if i > 0:
            self.dfs(i+1, count, max(curMax, self.nums[i]), curSum)
        if count < self.m:
            self.dfs(i+1, count+1, self.nums[i], curSum + curMax)

    def splitArray(self, P, d):
        self.nums = P #[10,2,20,5,15,10,10,1]
        self.n = len(self.nums)
        self.m = d # 3
        self.ans = float("inf")
        self.dfs(0, 0, 0, 0)
        return self.ans
Here is the DP solution in Python, similar to 2nd approach to Problem 410

